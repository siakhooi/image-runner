#!/bin/bash

readonly CONFIG_PATH=$HOME/.image-runner/config.yaml
readonly DEFAULT_WORKING_DIRECTORY=/working
readonly CONTAINER_CMD=docker

program_name=$(basename "$0")

if [[ $program_name == 'run-image' ]] && [[ $# -eq 0 ]]; then
  man run-image
  exit 0
fi

if [[ ! -f $CONFIG_PATH ]]; then
  echo "Config file not exists! ($CONFIG_PATH)" >&2
  exit 1
fi

if [[ $program_name == 'run-image' ]]; then
  if [[ $# -gt 0 ]] && [[ $# -lt 3 ]]; then
    program_name=$1
    shift
  else
    echo "Usage: $program_name runImageName [workingDir]" >&2
    exit 0
  fi
else
  if [[ $# -gt 1 ]]; then
    echo "Usage: $program_name [workingDir]" >&2
    exit 0
  fi
fi

readonly image_name_yq_path=".run-image.${program_name}.image"
image_name=$(yq "$image_name_yq_path" "$CONFIG_PATH" | sed 's/^null$//')
readonly image_name

readonly image_command_yq_path=".run-image.${program_name}.command"
image_command=$(yq "$image_command_yq_path" "$CONFIG_PATH" | sed 's/^null$//')
readonly image_command

readonly exec_command_yq_path=".run-image.${program_name}.execStartCommand"
exec_command=$(yq "$exec_command_yq_path" "$CONFIG_PATH" | sed 's/^null$//')
readonly exec_command

readonly working_directory_yq_path=".run-image.${program_name}.workingDirectory"
working_directory=$(yq "$working_directory_yq_path" "$CONFIG_PATH" | sed 's/^null$//')
readonly working_directory

readonly image_network_yq_path=".run-image.$program_name.network"
image_network=$(yq "$image_network_yq_path" "$CONFIG_PATH" | sed 's/^null$//')
readonly image_network

# check if program_name exists
if [[ -z "$image_name" ]] ||
  [[ -z "$image_command" ]]; then
  echo "$program_name is not configured." >&2
  exit 2
fi

working_directory=${working_directory:-$DEFAULT_WORKING_DIRECTORY}
host_directory=$(pwd)

if [[ $# -eq 1 ]]; then
  host_directory=$(realpath "$1")
  if [[ ! -d $host_directory ]]; then
    echo "Working Directory $host_directory not exists!" >&2
    exit 3
  fi
fi

if ! command -v $CONTAINER_CMD >/dev/null; then
  echo "Run Container Command ($CONTAINER_CMD) not exists! Please install." >&2
  exit 4
fi

OPTIONS=()
OPTIONS+=(-w "$working_directory" -e WORKSPACE="$working_directory" -v "$host_directory":"$working_directory")

[[ -n $image_network ]] && OPTIONS+=(--network "$image_network")

readonly image_volumns_yq_path='.run-image.'$program_name'.volumes[]'
readarray volumes < <(yq -o=j -I=0 "$image_volumns_yq_path" "$CONFIG_PATH" | sed 's/^null$//')

for volume in "${volumes[@]}"; do
  volume=${volume//[$'\t\r\n']/}

  if [[ -n $volume ]]; then
    path=$(echo "$volume" | yq '.path' -)
    hostPath=$(echo "$volume" | yq '.hostPath' -)
    OPTIONS+=(-v "$hostPath":"$path")
  fi
done

image_ports_yq_path='.run-image.'$program_name'.ports[]'
readarray ports < <(yq "$image_ports_yq_path" "$CONFIG_PATH" | sed 's/^null$//')
for port in "${ports[@]}"; do
  port=${port//[$'\t\r\n']/}
  OPTIONS+=(--publish "$port")
done

if [[ -z $exec_command ]]; then
  set -x
  $CONTAINER_CMD run --rm -it "${OPTIONS[@]}" "$image_name" "$image_command"
else
  init_command=$exec_command
  container_name="${program_name}_$(date +%Y%m%d%H%M%S%N)"
  set -x
  $CONTAINER_CMD run --rm -t -d --name "$container_name" "${OPTIONS[@]}" "$image_name" "$init_command"
  $CONTAINER_CMD exec -it "$container_name" "$image_command"
  $CONTAINER_CMD kill "$container_name"
fi
