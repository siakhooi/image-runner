#!/bin/bash

CONFIG_PATH=$HOME/.image-runner/config.yaml
DEFAULT_WORKING_DIRECTORY=/working

PROGRAM_NAME=$(basename "$0")

if [[ $PROGRAM_NAME == 'run-image' ]] && [[ $# -eq 0 ]]; then
    man run-image
    exit 0
fi

if [[ ! -f $CONFIG_PATH ]]; then
    echo "Config file not exists! ($CONFIG_PATH)" >&2
    exit 1
fi

if [[ $PROGRAM_NAME == 'run-image' ]]; then
    if [[ $# -gt 0 ]] && [[ $# -lt 3 ]]; then
        PROGRAM_NAME=$1
        shift
    else
        echo "Usage: $(basename "$0") runImageName [workingDir]" >&2
        exit 0
    fi
else
    if [[ $# -gt 1 ]]; then
        echo "Usage: $(basename "$0") [workingDir]" >&2
        exit 0
    fi
fi

IMAGE_YQ_PATH=".run-image.$PROGRAM_NAME.image"
IMAGE_NAME=$(yq "$IMAGE_YQ_PATH" "$CONFIG_PATH" | sed 's/^null$//')
COMMAND_YQ_PATH=".run-image.$PROGRAM_NAME.command"
IMAGE_COMMAND=$(yq "$COMMAND_YQ_PATH" "$CONFIG_PATH" | sed 's/^null$//')
exec_command_yq_path=".run-image.$PROGRAM_NAME.execStartCommand"
exec_command=$(yq "$exec_command_yq_path" "$CONFIG_PATH" | sed 's/^null$//')
WORKINGDIR_YQ_PATH=".run-image.$PROGRAM_NAME.workingDirectory"
WORKINGDIR=$(yq "$WORKINGDIR_YQ_PATH" "$CONFIG_PATH" | sed 's/^null$//')

NETWORK_YQ_PATH=".run-image.$PROGRAM_NAME.network"
IMAGE_NETWORK=$(yq "$NETWORK_YQ_PATH" "$CONFIG_PATH" | sed 's/^null$//')

# check if program_name exists
if [[ -z "$IMAGE_NAME" ]] ||
    [[ -z "$IMAGE_COMMAND" ]]; then
    echo "$PROGRAM_NAME is not configured." >&2
    exit 2
fi

WORKINGDIR=${WORKINGDIR:-$DEFAULT_WORKING_DIRECTORY}
HOSTDIR=$(pwd)
CONTAINER_CMD=docker

if [[ $# -eq 1 ]]; then
    HOSTDIR=$(realpath "$1")
    if [[ ! -d $HOSTDIR ]]; then
        echo "Working Directory $HOSTDIR not exists!" >&2
        exit 3
    fi
fi

if ! command -v $CONTAINER_CMD >/dev/null; then
    echo "Run Container Command ($CONTAINER_CMD) not exists! Please install." >&2
    exit 4
fi

OPTIONS=()
OPTIONS+=(-w "$WORKINGDIR" -e WORKSPACE="$WORKINGDIR" -v "$HOSTDIR":"$WORKINGDIR")

[[ -n $IMAGE_NETWORK ]] && OPTIONS+=(--network "$IMAGE_NETWORK")

IMAGE_VOLUMES_PATH='.run-image.'$PROGRAM_NAME'.volumes[]'
readarray VOLUME_ARRAY < <(yq -o=j -I=0 "$IMAGE_VOLUMES_PATH" "$CONFIG_PATH" | sed 's/^null$//')

for v in "${VOLUME_ARRAY[@]}"; do
    v=${v//[$'\t\r\n']/}

    if [[ -n $v ]]; then
        path=$(echo "$v" | yq '.path' -)
        hostPath=$(echo "$v" | yq '.hostPath' -)
        OPTIONS+=(-v "$hostPath":"$path")
    fi
done

IMAGE_PORTS_PATH='.run-image.'$PROGRAM_NAME'.ports[]'
readarray PORTS_ARRAY < <(yq "$IMAGE_PORTS_PATH" "$CONFIG_PATH" | sed 's/^null$//')
for v in "${PORTS_ARRAY[@]}"; do
  OPTIONS+=(--publish "$v")
done

if [[ -z $exec_command ]]; then
  set -x
  $CONTAINER_CMD run --rm -it "${OPTIONS[@]}" "$IMAGE_NAME" "$IMAGE_COMMAND"
else
  INIT_COMMAND=$exec_command
  CONTAINER_NAME="${PROGRAM_NAME}_$(date +%Y%m%d%H%M%S%N)"
  set -x
  $CONTAINER_CMD run --rm -t -d --name "$CONTAINER_NAME" "${OPTIONS[@]}" "$IMAGE_NAME" "$INIT_COMMAND"
  $CONTAINER_CMD exec -it "$CONTAINER_NAME" "$IMAGE_COMMAND"
  $CONTAINER_CMD kill "$CONTAINER_NAME"
fi
